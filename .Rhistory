library(ggplot2)
library(broom)
catplot <- ggplot(results, aes(x=Value, y=Points)) +
geom_point() +
facet_wrap(~ Category, ncol=2, scales="free_x")
catplot
###Regression Time####
#filter out 1, 2, 17 and 18 point recipients (skew results)
regress <- results %>% filter(Points > 2 & Points < 17)
#run the regression for each category
regress <- regress %>% group_by(Category) %>%
do(regresults = lm(Points ~ Value, data=.))
#organize regression results in to tidy df for calculating value
coefs <- tidy(regress, regresults) %>%
filter(term == "Value") %>%
select(Category, estimate)
save(coefs, file="coefs.rda")
#organize regression results in to tidy df for calculating standings
coefs.standings <- tidy(regress, regresults) %>% select(Category, term, estimate) %>%
dcast(Category ~ term)
names(coefs.standings)[2:3] <- c("yint", "coef")
save(coefs.standings, file="standingscoefs.rda")
coefs.standings
catplot <- ggplot(results, aes(x=Value, y=Points)) +
geom_point() +
facet_wrap(~ Category, ncol=5, scales="free_x")
catplot
ggsave("catplot.png", catplot, width=600, height = 800)
?ggsave
ggsave("catplot.png", catplot, width=6, height = 8)
catplot <- ggplot(results, aes(x=Value, y=Points)) +
geom_point() +
facet_wrap(~ Category, ncol=2, scales="free_x")
ggsave("catplot.png", catplot, width=6, height = 8)
#set up file
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
library(reshape2)
#read in results from pre-2014
results <- read.csv("./history/historicalresults.csv") %>%
select(1:4)
#fill in results for years that it is missing
results[1:540, 4] <- c(rep(2010, 18), rep(2011, 18), rep(2012, 18))
#convert to lowercase
results$Category <- tolower(results$Category)
#reorder columsn to match 2014 and 2015
results <- select(results, Category, Value, Year, Points)
######################################
#####read in the 2014 results#########
######################################
standings.2014 <- read.csv("./history/results2014.csv",stringsAsFactors = FALSE) %>%
select(R, HR, RBI, SB, Avg, W, K, Sv, ERA, WHIP)
standings.2014[,c("R","K")] <- sapply(standings.2014[,c("R","K")], gsub,pattern=",",replacement="")
standings.2014 <- sapply(standings.2014, as.numeric)
standings.2014 <- melt(standings.2014) %>% mutate(Category = tolower(Var2), Value = value, Year=2014) %>% select(4:6) %>%
group_by(Category) %>%
arrange(desc(Value)) %>%
mutate(Points=min_rank(Value))
standings.2014[standings.2014$Category %in% c("era", "whip"),"Points"] <- 19-standings.2014[standings.2014$Category %in% c("era", "whip"),"Points"]
######################################
#####read in the 2015 results#########
######################################
standings.2015 <- read.csv("./history/results2015.csv",stringsAsFactors = FALSE) %>%
select(R, HR, RBI, SB, Avg, W, K, Sv, ERA, WHIP)
standings.2015 <- sapply(standings.2015, as.numeric)
standings.2015 <- melt(standings.2015) %>% mutate(Category = tolower(Var2), Value = value, Year=2015) %>% select(4:6) %>%
group_by(Category) %>%
arrange(desc(Value)) %>%
mutate(Points=min_rank(Value))
standings.2015[standings.2015$Category %in% c("era", "whip"),"Points"] <- 19-standings.2015[standings.2015$Category %in% c("era", "whip"),"Points"]
######################################
##### Merge All Results Together######
######################################
results <- bind_rows(results, standings.2014, standings.2015) %>%
#filter out rows from 2013 that seem to be outliers
filter(!(Year==2013 & Category %in% c("r", "rbi", "hr")))
######################################
#####Graphs and Analysis go Here######
######################################
library(ggplot2)
library(broom)
catplot <- ggplot(results, aes(x=Value, y=Points)) +
geom_point() +
facet_wrap(~ Category, ncol=2, scales="free_x")
ggsave("catplot.png", catplot, width=6, height = 8)
###Regression Time####
#filter out 1, 2, 17 and 18 point recipients (skew results)
regress <- results %>% filter(Points > 2 & Points < 17)
#run the regression for each category
regress <- regress %>% group_by(Category) %>%
do(regresults = lm(Points ~ Value, data=.))
#organize regression results in to tidy df for calculating value
coefs <- tidy(regress, regresults) %>%
filter(term == "Value") %>%
select(Category, estimate)
save(coefs, file="coefs.rda")
#organize regression results in to tidy df for calculating standings
coefs.standings <- tidy(regress, regresults) %>% select(Category, term, estimate) %>%
dcast(Category ~ term)
names(coefs.standings)[2:3] <- c("yint", "coef")
save(coefs.standings, file="standingscoefs.rda")
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
###Load the coefficients data frame
load("coefs.rda")
###############################################################
################HITTER STUFF LIVES HERE#########################
################################################################
#Import and clean data on replacement levels
#read in league wide csv
replacement_hitters <- read.csv("replacement_hitters.csv", stringsAsFactors = FALSE)
replacement_hitters$Position <- c("catcher",
"first_base",
"second_base",
"shortstop",
"third_base",
"middle_infield",
"corner_infield",
"outfield",
"dh"
)
names(replacement_hitters)[2:6] <- sapply(names(replacement_hitters[c(2:6)]), paste, ".repl", sep="")
#rename columns
names(replacement_hitters) <- c("position",
"runs",
"hr",
"rbi",
"sb",
"avg")
#list of file names
filelocs <- sapply("./steamer/", paste, list.files("./steamer"), sep="")[c(1:6,8)]
#read in hitterdata
hitterdata <- lapply(filelocs, read.csv, header=TRUE, stringsAsFactors = FALSE)
#keep only variables I care about
hitterdata <- lapply(hitterdata, select, Name, Team, AB, PA, R,HR, RBI, SB, AVG, OBP, playerid)
#rename columns
hitterdata <- lapply(hitterdata, function(x) {colnames(x)[1] <- "name"
return(x)})
#create projection dataframes for each position
grab.repl <- function(pos) {
temp <- filter(replacement_hitters, position==pos)
names(temp)[2:6] <- sapply(names(temp)[2:6], paste, ".repl", sep="")
return(temp)
}
#1b
first.base.proj <- cbind(hitterdata[[1]], grab.repl("first_base"))
#2b
second.base.proj <- cbind(hitterdata[[2]], grab.repl("second_base"))
#3b
third.base.proj <- cbind(hitterdata[[3]], grab.repl("third_base"))
#C
catcher.proj <- cbind(hitterdata[[4]], grab.repl("catcher"))
#dh
dh.proj <- cbind(hitterdata[[5]], grab.repl("dh"))
#of
of.proj <- cbind(hitterdata[[6]], grab.repl("outfield"))
#SS
shortstop.proj <- cbind(hitterdata[[7]], grab.repl("shortstop"))
#build all positional projections into a list
hitter_projections <- list(first.base.proj,
second.base.proj,
third.base.proj,
catcher.proj,
dh.proj,
of.proj,
shortstop.proj)
#convert coefficients frame to a normal data frame
coefs.for.calc <- as.numeric(coefs$estimate)
names(coefs.for.calc) <- coefs$Category
#create function to calculate value for a position
calculate.value <- function(df) {
mutate(df,
marginal.hr = HR - hr.repl,
marginal.runs = R - runs.repl,
marginal.rbi = RBI - rbi.repl,
marginal.sb = SB - sb.repl,
marginal.avg = AVG - avg.repl,
marginal.runs.points = marginal.runs * coefs.for.calc[["r"]],
marginal.hr.points = marginal.hr * coefs.for.calc[["hr"]],
marginal.rbi.points = marginal.rbi * coefs.for.calc[["rbi"]],
marginal.sb.points = marginal.sb * coefs.for.calc[["sb"]],
marginal.avg.points = marginal.avg * coefs.for.calc[["avg"]]/15,
marginal.total.points = (marginal.runs.points +
marginal.hr.points +
marginal.rbi.points +
marginal.avg.points +
marginal.sb.points)*1.2,#this is an adjustment upwards;
#in 2016 calculation, top 270 players
#result in only 735.5 marginal points.
#this means we adjust upwards to make 855
#marginal points (sum(1:18)*5)
#total of 4680 dollars exist in the league. 1700 marginal points exist. Therefore, marginal
#point is worth 4680/1700
dollar.value = marginal.total.points*(4680/1700)
)
}
#calculate values for all of the positions
hitter_projections <- lapply(hitter_projections, calculate.value)
#merge projections for different positions together.
hitter_projections <- do.call(rbind, hitter_projections)
#get player's strongest position
hitter_projections <- hitter_projections %>%
group_by(playerid) %>%
mutate(times.appears = n(), max.points = max(dollar.value)) %>%
filter(position != "dh" | times.appears==1) %>%
filter(dollar.value==max.points) %>%
ungroup() %>%
arrange(desc(dollar.value)) %>%
select(name, Team, position, playerid, AB, R, HR, RBI, SB, AVG, marginal.total.points, dollar.value) %>%
mutate( marginal.total.points = round(marginal.total.points, 2),
dollar.value = round(dollar.value, 2)) %>%
filter(AB > 1)
################################################################
################PITCHER STUFF LIVES HERE########################
################################################################
#read in projections
pitcher_projections <- read.csv("./steamer/pitchers.csv", stringsAsFactors=FALSE)
#keep only relevant columns
pitcher_projections <- select(pitcher_projections,Name,Team,W,ERA,SV,IP,SO,WHIP,playerid) %>%
mutate(position = "pitcher")
names(pitcher_projections)[c(1, 7)] <- c("name", "K")
#create replacement pitcher values
#these are the mean projections for the 170th through 190th best players
replacement.pitcher <- c(3.761429,1.284286,5.523810,2.952381,88.714286)
names(replacement.pitcher) <- c("ERA.repl","WHIP.repl","W.repl","SV.repl","K.repl")
#calculate marginal values and points
pitcher_projections <- pitcher_projections %>%
mutate(
marginal.ERA = ERA - replacement.pitcher["ERA.repl"],
marginal.WHIP = WHIP - replacement.pitcher["WHIP.repl"],
marginal.W = W - replacement.pitcher["W.repl"],
marginal.SV = SV - replacement.pitcher["SV.repl"],
marginal.K = K - replacement.pitcher["K.repl"],
ERA.points = (marginal.ERA *coefs.for.calc[["era"]])*(IP/1464),
WHIP.points = (marginal.WHIP*coefs.for.calc[["whip"]])*(IP/1464),
W.points = marginal.W*coefs.for.calc[["w"]],
SV.points = marginal.SV*coefs.for.calc[["sv"]],
K.points = marginal.K*coefs.for.calc[["k"]],
marginal.total.points =  1.16*(ERA.points + WHIP.points + W.points + SV.points + K.points),
dollar.value = marginal.total.points*(4680/1700)
) %>%
#sort by dollar value
arrange(desc(dollar.value)) %>%
#select relevant columns
select(name,Team,position,playerid,IP,ERA,WHIP,SV,W,K,marginal.total.points,dollar.value) %>%
#round points and dollars columns
mutate(marginal.total.points = round(marginal.total.points, 2), dollar.value = round(dollar.value, 2)) %>%
#select only pithcers with at least 1 IP
filter(IP > 1)
save(hitter_projections, pitcher_projections, file = "projections.rda")
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
marmaduke
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
marmaduke
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
marmaduek
marmaduke
bears
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
bears
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
#write projections files to csv
write.csv(pitcher_projections, file = "pitcher_projections.csv")
write.csv(hitter_projections, file = "hitter_projections.csv")
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
setwd("/home/sean/Documents/rstuff/fantasy2017")
library(dplyr)
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
